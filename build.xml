<?xml version="1.0" ?>

<!-- Build instruction for HAR Viewer application. In order to build final
    distribution, run: $ant build within the root directory and
    deploy files located within 'webapp-build' directory -->
<project name="HARViewer" basedir="." default="build">

    <!-- Directories -->
    <property name="app.dir" value="webapp"/>
    <property name="build.dir" value="${app.dir}-build"/>
    <property name="examples.dir" value="${app.dir}/examples"/>
    <property file="ant.properties"/>
    <property name="build.tools.dir" value="build-tools"/>
    <property name="rjs.version" value="2.1.18"/>
    <property name="rjs.cmd" value="${basedir}/r.js/dist/r.js"/>
    <property name="rjs.runner" value="node"/>

    <!-- Tools for building release package of HAR Viewer.
        js-build-tools: http://code.google.com/p/js-build-tools/
        js-min (ant task): http://code.google.com/p/jsmin-ant-task/
        shrink-safe: http://shrinksafe.dojotoolkit.org/ -->
    <property name="jsmin.jar" value="${build.tools.dir}/jsmin/jsmin.0.2.3.jar"/>
    <property name="js_build_tools.jar" value="${build.tools.dir}/js-build-tools/lib/js_build_tools.jar"/>

    <path id="js-build-tasks.classpath">
        <pathelement location="."/>
        <fileset dir="${build.tools.dir}/js-build-tools/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- Task definitions -->
    <taskdef name="jsmin"
        classname="net.matthaynes.jsmin.JSMin_Task"
        classpath="${jsmin.jar}"/>
    <taskdef name="preprocess"
        classname="com.moxiecode.ant.tasks.PreProcessTask"
        classpathref="js-build-tasks.classpath"/>

    <!-- Remove the previous HAR Viewer build. -->
    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>





    <!--
    Checks for a folder named "r.js".
    If such a folder is found, sets the "rjs.present" property.
    -->
    <target name="check-rjs-folder">
        <available file="r.js" property="rjs.folder.present"/>
    </target>

    <!--
    Downloads and unpacks the r.js build tool, but only if the "r.js" folder was not found.
    Therefore, if you want to do a fresh download and unpack of r.js, delete the "r.js" folder before running ant.
    -->
    <target name="get-rjs" depends="check-rjs-folder" unless="rjs.folder.present">
        <get src="https://github.com/jrburke/r.js/archive/${rjs.version}.zip" dest="r.js.zip" verbose="true" />
        <unzip src="r.js.zip" dest="r.js">
            <!-- remove the first "r.js-x.y.x" part of the folder structure -->
            <cutdirsmapper dirs="1"/>
        </unzip>
    </target>





    <!-- Determine whether to use Node.JS or Java -->
    <target name="rjs-determine-runner" depends="get-rjs">
        <condition property="rjs.runner.isNode">
            <matches pattern="^node$" string="${rjs.runner}"/>
        </condition>

        <condition property="rjs.runner.isJava">
            <matches pattern="^java$" string="${rjs.runner}"/>
        </condition>

        <fail message="Ant property 'rjs.runner' must be set to either 'node' (the default) or 'java'. Value was '${rjs.runner}'.">
            <condition>
                <not>
                    <or>
                        <isset property="rjs.runner.isNode"/>
                        <isset property="rjs.runner.isJava"/>
                    </or>
                </not>
            </condition>
        </fail>
    </target>





    <!-- Run r.js build tool (using the chosen runner) -->
    <target name="rjs-node" depends="rjs-determine-runner" if="rjs.runner.isNode">
        <exec dir="${app.dir}/scripts" executable="node" resolveexecutable="true">
            <arg value="${rjs.cmd}"/>
            <arg value="-o"/>
            <arg value="app.build.js"/>
        </exec>
    </target>

    <target name="rjs-java" depends="rjs-determine-runner" if="rjs.runner.isJava">
       <java fork="true" dir="${app.dir}/scripts" classname="org.mozilla.javascript.tools.shell.Main">
           <arg value="${rjs.cmd}"/>
           <arg value="-o"/>
           <arg value="app.build.js"/>
           <classpath>
               <pathelement location="${basedir}/r.js/lib/rhino/js.jar"/>
               <pathelement location="${basedir}/r.js/lib/closure/compiler.jar"/>
           </classpath>
       </java>
    </target>





    <!-- Build HAR Viewer package (the result is within build.dir) -->
    <target name="build" depends="rjs-java, rjs-node">

        <!-- Log info about the current OS -->
        <echo message="Building HAR Viewer on:" />
        <echo message="os.name = ${os.name}" />
        <echo message="os.arch = ${os.arch}" />
        <echo message="os.version = ${os.version}" />

        <!-- Copy fresh harSchema.js we don't want it to be compressed
            its content is displayed in the Schema tab -->
        <copy file="${app.dir}/scripts/preview/harSchema.js"
            todir="${build.dir}/scripts/preview" overwrite="true"/>

        <!-- Copy fresh domplate to the build.dir and compile using jsmin.
            The Google's Closure Compliler breaks the domplate code
            (by replacing local var names like e.g.: __path__) -->
        <copy file="${app.dir}/scripts/domplate/domplate.js"
            todir="${build.dir}/scripts/domplate" overwrite="true"/>
        <jsmin srcfile="${build.dir}/scripts/domplate/domplate.js" force="true"/>

        <!-- Preprocess script/core/trace file to avoid using the console object --> 
        <preprocess infile="${app.dir}/scripts/core/trace.js"
            outfile="${build.dir}/scripts/core/trace.js" defines="_RELEASE" />

        <!-- Generate version number. The version info is loaded from 'ant.properties' file. -->
        <replace dir="${build.dir}" propertyFile="ant.properties">
            <include name="*.php" />
            <replacefilter token="@VERSION@" property="VERSION"/>
            <replacefilter token="@GOOGLE-ANALYTICS-PROFILE@" property="GOOGLE-ANALYTICS-PROFILE"/>
        </replace>

        <!-- Final version message -->
        <echo message="HAR Viewer version: ${VERSION} build OK"/>
    </target>

    <!-- Build HAR Viewer package (the result is within build.dir) -->
    <target name="clean-build" depends="clean, build">
    </target>

    <!-- Support for generating docs from Firebug source code using js-doc-toolkit
        See the output in $svn/jsdoc/out directory -->
    <target name="jsdoc" depends="build" description="Generate documentation">
        <!-- Directories -->
        <property name="jsdoc.dir" value="${build.tools.dir}/jsdoc/"/>
        <property name="jsdoc-toolkit.dir" value="${jsdoc.dir}/jsdoc-toolkit-2.3.0/"/>
        <property name="jsdoc-output.dir" value="${app.dir}-jsdoc"/>

        <delete dir="${jsdoc-output.dir}"/>

        <path id="jsdoctoolkit">
            <!-- Rhino js.jar 1.7.R2 must be used with jsdoctoolkit-ant-task-1.0.1.jar -->
            <fileset dir="${jsdoc.dir}" includes="*.jar"/>
        </path>

        <taskdef name="jsdoctoolkit"
            classpathref="jsdoctoolkit"
            classname="uk.co.darrenhurley.ant.tasks.JsDocToolkit"/>

        <echo message="Generate doc from Firebug source."/>

        <!-- Clean the output direcotory -->
        <delete dir="${jsdoc-output.dir}"/>

        <!-- Parse all source files -->
        <jsdoctoolkit jsdochome="${jsdoc-toolkit.dir}"
            template="firebug"
            outputdir="${jsdoc-output.dir}"
            inputdir="." />
    </target>

</project>
