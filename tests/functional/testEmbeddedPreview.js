/**
 * Check custom time stamps generated by console.timeStamp() method.
 */
define([
  './config',
  './DriverUtils',
  'dojo/node!@theintern/leadfoot',
], function(config, DriverUtils, leadfoot) {
  const { registerSuite } = intern.getInterface("object");
  const { assert } = intern.getPlugin("chai");
  const { pollUntil } = leadfoot;
  const { testBase } = config;

  registerSuite('testEmbeddedPreview', {
    'testEmbeddedPreview': function() {
      // Some of these tests need a larger timeout for finding DOM elements
      // because we need the HAR to parse/display fully before we query the DOM.
      var findTimeout = config.findTimeout;
      var r = this.remote;

      var url = testBase + "tests/testEmbeddedPreview.html";

      return r
        .setFindTimeout(findTimeout)
        .get(url)
        .then(DriverUtils.waitForElements("iframe", 3, findTimeout))
        .then(pollUntil(DriverUtils.querySelectAllInFrameAndReturnLengthOrNull, ['#preview1', '.pageTable'], findTimeout))
        .then(function(len) {
          assert.strictEqual(len, 1, "#preview1.pageTable");
        })
        .then(pollUntil(DriverUtils.querySelectAllInFrameAndReturnLengthOrNull, ['#preview2', '.pageTable'], findTimeout))
        .then(function(len) {
          assert.strictEqual(len, 1, "#preview2.pageTable");
        })
        .then(pollUntil(DriverUtils.querySelectAllInFrameAndReturnLengthOrNull, ['#preview3', '.pageTable'], findTimeout))
        .then(function(len) {
          assert.strictEqual(len, 1, "#preview3.pageTable");
        })
        .then(pollUntil(DriverUtils.querySelectAllInFrameAndReturnLengthOrNull, ['#preview1', '.netRow'], findTimeout))
        .then(function(len) {
          assert.strictEqual(len, 2, "#preview3.netRow");
        })
        .then(pollUntil(DriverUtils.querySelectAllInFrameAndReturnLengthOrNull, ['#preview2', '.netRow'], findTimeout))
        .then(function(len) {
          assert.strictEqual(len, 2, "#preview2.netRow");
        })
        .then(pollUntil(DriverUtils.querySelectAllInFrameAndReturnLengthOrNull, ['#preview3', '.netRow'], findTimeout))
        .then(function(len) {
          assert.strictEqual(len, 11, "#preview3.netRow");
        })
        .execute("return document.querySelector('#preview2').firstChild.clientWidth")
        .then(function(width) {
          assert.include([400], width, "#preview2.firstChild.clientHeight");
        })
        .execute("return document.querySelector('#preview2').firstChild.clientHeight")
        .then(function(height) {
          assert.include([50], height, "#preview2.firstChild.clientHeight");
        });
    },
  });
});
